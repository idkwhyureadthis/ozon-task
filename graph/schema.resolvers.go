package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/idkwhyureadthis/ozon-task/graph/model"
	"github.com/idkwhyureadthis/ozon-task/internal/pkg/database"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	return db.CreateUser(ctx, input), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input *model.UpdateUserInput) (*model.User, error) {
	return db.UpdateUser(ctx, input), nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input *model.CreatePostInput) (*model.Post, error) {
	return db.CreatePost(ctx, input), nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, input *model.UpdatePostInput) (*model.Post, error) {
	return db.UpdatePost(ctx, id, input), nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.DeletePostResponse, error) {
	return db.DeletePost(ctx, id), nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input *model.CreateCommentInput) (*model.Comment, error) {
	return db.CreateComment(ctx, input), nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, commID string, input *model.UpdateCommentInput) (*model.Comment, error) {
	return db.UpdateComment(ctx, commID, input), nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID string, page int) ([]*model.Comment, error) {
	return db.GetComments(ctx, postID, page), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return db.GetUser(ctx, id), nil
}

// Posts is the resolver for the post field
func (r *queryResolver) Posts(ctx context.Context, page int) ([]*model.Post, error) {
	return db.GetPosts(ctx, page), nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, postID string) (*model.Post, error) {
	return db.GetPost(ctx, postID), nil
}

// GetReplies is the resolver for the getReplies field.
func (r *queryResolver) GetReplies(ctx context.Context, commentID string, page int) ([]*model.Comment, error) {
	return db.GetReplies(ctx, commentID, page), nil
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, commentID string) (*model.Comment, error) {
	return db.GetComment(ctx, commentID), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var db *database.DB

func Init() {
	db = database.GetConnection()
}
